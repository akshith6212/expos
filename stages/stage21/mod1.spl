// Process Manager Module

// print("in mod1");
alias funcNum R1;
alias pid R2;


// Get Pcb Entry
if (funcNum == 1) then
    multipush(R1);
    R1 = 0;
    while (R1 < 16) do
        if ([PROCESS_TABLE + R1 * 16 + 4] == TERMINATED) then
            R0 = R1;
            [PROCESS_TABLE + R1 * 16 + 1] = R1;
            [PROCESS_TABLE + R1 * 16 + 4] = ALLOCATED;
            [PROCESS_TABLE + R1 * 16 + 14] = PAGE_TABLE_BASE + R1 * 20;
            [PROCESS_TABLE + R1 * 16 + 15] = 10;
            multipop(R1);
            return;
        endif;
        R1 = R1 + 1;
    endwhile;
    multipop(R1);
    R0 = -1;
    return;
endif;

//free userareapage
if (funcNum == 2) then
    multipush(R1,R2);
    R1 = 2;
    R2 = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11];
    call MOD_2;
    multipop(R1,R2);
    return;
endif;

//Exit Process
if ( funcNum == 3 ) then
    multipush(R1,R2);
    R1 = 4; //free page table
    R2 = R2;
    // print(R2);
    call MOD_1;

    R1 = 2; //free user area page
    R2 = R2;
    call MOD_1;
    multipop(R1,R2);

    multipush(R0,R5);
    alias prevMODE R5;
    prevMODE = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9];
    if (prevMODE != 9) then
        R0 = 1;
        while (R0 < 16) do
            if ([PROCESS_TABLE + R0 * 16 + 4] == WAIT_PROCESS && [PROCESS_TABLE + R0 * 16 + 5] == [SYSTEM_STATUS_TABLE + 1]) then
                [PROCESS_TABLE + R0 * 16 + 4] = READY;
                [PROCESS_TABLE + R0 * 16 + 5] = -1;
            endif;

            if ([PROCESS_TABLE + R0 * 16 + 2] == [SYSTEM_STATUS_TABLE + 1]) then
                [PROCESS_TABLE + R0 * 16 + 2] = -1;
            endif;

            R0 = R0 + 1;
        endwhile;

    endif;
    multipop(R0, R5);


    [PROCESS_TABLE + R2 * 16 + 4] = TERMINATED;
    return;
endif;

// Free Page Table
if ( funcNum == 4 ) then
    // print("FP4");
    PTBR = PAGE_TABLE_BASE + 20 * [SYSTEM_STATUS_TABLE + 1];
    [PTBR + 0] = -1;
    [PTBR + 1] = "0000";
    [PTBR + 2] = -1;
    [PTBR + 3] = "0000";
    
    alias disk_map R3;
    alias page     R4;

    disk_map = DISK_MAP_TABLE + [SYSTEM_STATUS_TABLE]*10;
    page = 2;

    while(page < 10) do
        if([PTBR+2*page] != -1) then
            backup;
            R1 = 2;
            R2 = [PTBR + page*2];
            call MOD_2;

            restore;
            [PTBR + page*2] = -1;
            [PTBR + page*2 + 1] = "0000";
            if( ([disk_map+page] != -1) && (page == 2 || page == 3 || page == 8 || page == 9)) then
                backup;
                R1 = 4;
                R2 = [disk_map + page];
                call MOD_2;
                [disk_map + page] = -1;
                restore;
            endif;
        endif;
        page = page + 1;
    endwhile;


    return;
endif;

R0 = -1;
return;