// Memory Manager Module

// print("in mod2");
alias funcNum R1;

//get free page
if (funcNum == 1) then
    // print(1);
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;
    if ([SYSTEM_STATUS_TABLE + 2] == 0) then
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = WAIT_MEM;
        backup;
        call MOD_5; //calling scheduler
        restore;
    endif;
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
    
    R1 = 76; //because from 76 we are using the pages
    while ( R1 < 127 ) do
        if ([MEMORY_FREE_LIST + R1] == 0) then
            break;
        endif;
        R1 = R1 + 1;
    endwhile;
    [MEMORY_FREE_LIST + R1] = 1;
    R0 = R1;
    // print R0;
    return;
endif;

//release page
if (funcNum == 2) then 
    // print(2);
    backup;
    [MEMORY_FREE_LIST + R2] = [MEMORY_FREE_LIST + R2] - 1;
    if([MEMORY_FREE_LIST + R2] == 0) then
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
    endif;
    R1 = 0;
    while (R1 < 16) do
        if ([PROCESS_TABLE + R1 * 16 + 4] == WAIT_MEM) then
            [PROCESS_TABLE + R1 * 16 + 4] = READY;
        endif;
        R1 = R1 + 1;
    endwhile; 
    restore;
    return;
endif;

// release block
if(funcNum == 4) then
    // print("RB4");
    [DISK_FREE_LIST + R2] = [DISK_FREE_LIST + R2] - 1;
    return;
endif;

//Get Code Page Function
if(funcNum == 5) then
    // print(5);
    // inputs
    alias blockval R2; //from inode index
    alias pid R3;

    // variables
    alias i R4;
    alias disk_map R5;
    alias j R6;

    print("get:codepg");

    i = 0;
    while (i < 10) do
        disk_map = DISK_MAP_TABLE + i * 10;
        j = 4;
        while (j < 8) do
            if (blockval == [disk_map + j]) then
                //returning the page number
                R0 = [PAGE_TABLE_BASE + i * 20 + j * 2];
                if (R0 != -1) then
                    [MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
                    return;
                endif;
            endif;
            j = j + 1;
        endwhile;
        i = i + 1;
    endwhile;

    breakpoint;

    multipush(R2);
    R1 = 1;
    call MOD_2;
    multipop(R2);
    
    R1 = 2;
    R4 = blockval;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    R3 = R0;
    multipush(R3);
    call MOD_4;
    multipop(R3);
    
    R0 = R3;
    breakpoint;
    
    return;
endif;



R0 = -1;
return;